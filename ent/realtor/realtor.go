// Code generated by ent, DO NOT EDIT.

package realtor

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the realtor type in the database.
	Label = "realtor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldFullName holds the string denoting the full_name field in the database.
	FieldFullName = "full_name"
	// FieldPhoto holds the string denoting the photo field in the database.
	FieldPhoto = "photo"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldIsMvp holds the string denoting the is_mvp field in the database.
	FieldIsMvp = "is_mvp"
	// FieldHireDate holds the string denoting the hire_date field in the database.
	FieldHireDate = "hire_date"
	// EdgeListings holds the string denoting the listings edge name in mutations.
	EdgeListings = "listings"
	// Table holds the table name of the realtor in the database.
	Table = "realtors"
	// ListingsTable is the table that holds the listings relation/edge.
	ListingsTable = "listings"
	// ListingsInverseTable is the table name for the Listing entity.
	// It exists in this package in order to avoid circular dependency with the "listing" package.
	ListingsInverseTable = "listings"
	// ListingsColumn is the table column denoting the listings relation/edge.
	ListingsColumn = "realtor_id"
)

// Columns holds all SQL columns for realtor fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldFullName,
	FieldPhoto,
	FieldDescription,
	FieldPhone,
	FieldEmail,
	FieldIsMvp,
	FieldHireDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// FullNameValidator is a validator for the "full_name" field. It is called by the builders before save.
	FullNameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultIsMvp holds the default value on creation for the "is_mvp" field.
	DefaultIsMvp bool
	// DefaultHireDate holds the default value on creation for the "hire_date" field.
	DefaultHireDate func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Realtor queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByFullName orders the results by the full_name field.
func ByFullName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByIsMvp orders the results by the is_mvp field.
func ByIsMvp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsMvp, opts...).ToFunc()
}

// ByHireDate orders the results by the hire_date field.
func ByHireDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHireDate, opts...).ToFunc()
}

// ByListingsCount orders the results by listings count.
func ByListingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newListingsStep(), opts...)
	}
}

// ByListings orders the results by listings terms.
func ByListings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newListingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newListingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ListingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ListingsTable, ListingsColumn),
	)
}
